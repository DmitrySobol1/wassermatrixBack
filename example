// // создать Stripe Checkout Session для оплаты
// app.post('/api/create_payment_session', async (req, res) => {
//   try {
//     const { cart, deliveryInfo, totalSum, region, tlgid } = req.body;

//     if (!cart || !deliveryInfo || !totalSum || !tlgid) {
//       return res.status(400).json({ 
//         status: 'error', 
//         message: 'Cart, delivery info, total sum and tlgid are required' 
//       });
//     }

//     // Создаем line items для Stripe из товаров корзины
//     const lineItems = cart.map((item) => {
//       const itemPrice = Number(item.price_eu) || 0;
//       const deliveryPrice = Number(item[`deliveryPriceToShow_${region}`]) || 0;
//       const totalItemPrice = (itemPrice + deliveryPrice) * 100; // Stripe работает в копейках/центах


//       // const lineItems = order.goods.map((item) => {
//       // const good = item.itemId;
//       // const itemPrice = Number(good.price_eu) || 0;
//       // const deliveryPrice = Number(good[`delivery_price_${order.regionDelivery}`]) || 0;
//       // const totalItemPrice = (itemPrice + deliveryPrice) * 100;


//       return {
//         price_data: {
//           currency: 'eur', // или item.valuteToShow.toLowerCase()
//           product_data: {
//             name: item[`name_en`] || item.name_en,
//             description: `Delivery to ${deliveryInfo.selectedCountry.name_en}`,
//           },
//           unit_amount: Math.round(totalItemPrice / item.qty), // Цена за единицу включая доставку
//         },
//         quantity: item.qty,
//       };
//     });

//     console.log('lineItems',lineItems )
    

//     // Создаем Stripe Checkout Session
//     const session = await stripe.checkout.sessions.create({
//       payment_method_types: ['card'],
//       line_items: lineItems,
//       mode: 'payment',
//       success_url: `${process.env.FRONTEND_URL}/#/success-page?session_id={CHECKOUT_SESSION_ID}`,
//       cancel_url: `${process.env.FRONTEND_URL}/#/cancellpay-page`, 
//       metadata: {
//         tlgid: tlgid.toString(),
//         deliveryInfo: JSON.stringify(deliveryInfo),
//         region: region,
//         totalSum: totalSum.toString(),
//       },
//     });

//     // Получаем информацию о пользователе
//     const user = await UserModel.findOne({ tlgid: tlgid });
//     const jbid = user?.jbid;

//     // Находим статус "new" или используем дефолтный
//     let defaultStatus = await OrdersStatusSchema.findOne({ name_en: 'new' });
//     if (!defaultStatus) {
//       // Если нет статуса "new", создаем его
//       defaultStatus = new OrdersStatusSchema({
//         name_en: 'new',
//         name_ru: 'новый',
//         name_de: 'neu',
//         numForFilter: 1
//       });
//       await defaultStatus.save();
//     }

//     // Создаем заказ с stripeSessionId, но payStatus=false до подтверждения
//     const newOrder = new OrdersModel({
//       tlgid: tlgid,
//       jbid: jbid,
//       goods: cart.map((item) => ({
//         itemId: item.itemId,
//         qty: item.qty
//       })),
//       country: deliveryInfo.selectedCountry.name_en,
//       regionDelivery: region,
//       adress: deliveryInfo.address, // Note: keeping 'adress' spelling to match model
//       phone: deliveryInfo.phone,
//       name: deliveryInfo.userName,
//       orderStatus: defaultStatus._id,
//       payStatus: false, // Будет изменено на true через webhook
//       stripeSessionId: session.id // Сохраняем session ID для webhook
//     });

//     await newOrder.save();

//     // Удаляем корзину пользователя
//     await CartsModel.deleteOne({ tlgid: tlgid });

//     res.json({ 
//       status: 'ok', 
//       sessionId: session.id,
//       url: session.url,
//       orderId: newOrder._id
//     });
//   } catch (error) {
//     console.error('[Stripe Error] Full error:', error);
//     res.status(500).json({
//       status: 'server error',
//       message: error.message,
//     });
//   }
// });

// // Повторная оплата существующего заказа
// app.post('/api/repay_order', async (req, res) => {
//   try {
//     const { orderId, tlgid } = req.body;

//     if (!orderId || !tlgid) {
//       return res.status(400).json({ 
//         status: 'error', 
//         message: 'Order ID and tlgid are required' 
//       });
//     }

//     // Ищем заказ в базе данных
//     const order = await OrdersModel.findById(orderId)
//       .populate('goods.itemId')
//       .lean();

//     if (!order) {
//       return res.status(404).json({ 
//         status: 'error', 
//         message: 'Order not found' 
//       });
//     }

//     // Проверяем, что заказ принадлежит пользователю
//     if (order.tlgid !== tlgid) {
//       return res.status(403).json({ 
//         status: 'error', 
//         message: 'Access denied' 
//       });
//     }

//     // Если заказ уже оплачен, возвращаем ошибку
//     if (order.payStatus === true) {
//       return res.status(400).json({ 
//         status: 'error', 
//         message: 'Order is already paid' 
//       });
//     }

//     // Создаем line items для Stripe из товаров заказа
//     const lineItems = order.goods.map((item) => {
//       const good = item.itemId;
//       const itemPrice = Number(good.price_eu) || 0;
//       const deliveryPrice = Number(good[`delivery_price_${order.regionDelivery}`]) || 0;
//       const totalItemPrice = (itemPrice + deliveryPrice) * 100; // Stripe работает в копейках/центах

//       return {
//         price_data: {
//           currency: 'eur',
//           product_data: {
//             name: good.name_en,
//             description: `Delivery to ${order.country}`,
//           },
//           unit_amount: Math.round(totalItemPrice / item.qty), // Цена за единицу включая доставку
//         },
//         quantity: item.qty,
//       };
//     });

//     // Создаем новую Stripe Checkout Session
//     const session = await stripe.checkout.sessions.create({
//       payment_method_types: ['card'],
//       line_items: lineItems,
//       mode: 'payment',
//       success_url: `${process.env.FRONTEND_URL}/#/success-page?session_id={CHECKOUT_SESSION_ID}`,
//       cancel_url: `${process.env.FRONTEND_URL}/#/orders`, 
//       metadata: {
//         orderId: orderId,
//         tlgid: tlgid.toString(),
//         repayment: 'true'
//       },
//     });

//     // Обновляем stripeSessionId в существующем заказе
//     await OrdersModel.findByIdAndUpdate(orderId, {
//       stripeSessionId: session.id
//     });

//     res.json({ 
//       status: 'ok', 
//       sessionId: session.id,
//       url: session.url,
//       orderId: orderId
//     });
//   } catch (error) {
//     console.error('[Repay Order Error] Full error:', error);
//     res.status(500).json({
//       status: 'server error',
//       message: error.message,
//     });
//   }
// });