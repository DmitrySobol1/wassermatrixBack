// –î–ª—è —Ç–µ—Å—Ç–æ–≤:
// 1) –ø–æ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª env –≤ —ç—Ç—É –ø–∞–ø–∫—É
// 2) —Ä–∞—Å—Å–∫–æ–º–µ–Ω—Ç–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ 'TEST'
// 3) –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏ 2 —Å—Ç—Ä–æ–∫–∏ 'PROD'
// 4) —Ä–∞—Å—Å–∫–æ–º–µ–Ω—Ç–∏ EXECUTE

// TEST
// import dotenv from 'dotenv';
// dotenv.config();

// PROD
import dotenv from 'dotenv';
dotenv.config({ path: '/root/wassermatrix/wassermatrixBack/.env' });

// EXECUTE
// executeCheckTask();

// import { logger } from '../middlewares/error-logger.js'

import mongoose from 'mongoose';
import axios from 'axios';

import OrdersModel from '../models/orders.js';
import UserModel from '../models/user.js';
// import { creaeVerifiedPayout } from '../modelsOperations/models.services.js';

mongoose
  .connect(process.env.DATABASE_URL)
  .then(() => console.log('DB OK'))
  .catch((err) => console.log('db error:', err));

export async function executeCheckTask() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞—é cron2: delete orders or send msg about delivery...');

    // 1) –ó–∞–ø–∏—Å–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—É—é –¥–∞—Ç—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é todayDate
    const todayDate = new Date();

    // 2) –ó–∞–ø–∏—Å–∞—Ç—å –≤ –º–∞—Å—Å–∏–≤ allOrders –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    const allOrders = await OrdersModel.find();

    // 3) –ü—Ä–æ–π—Ç–∏—Å—å —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º allOrders
    for (const order of allOrders) {
      // –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
      if (order.eta && order.payStatus == true) {
        const etaDate = new Date(order.eta);
        const etaFormattedToSend = etaDate.toLocaleDateString('de-DE', {
          day: '2-digit',
          month: '2-digit',
          year: '2-digit',
        });
        const timeDifferenceToPayedOrders =
          etaDate.getTime() - todayDate.getTime();
        const deltaPayed = Math.floor(
          timeDifferenceToPayedOrders / (1000 * 60 * 60 * 24)
        );

        console.log('–¥–Ω–µ–π –¥–æ ETA=', deltaPayed);

        // –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏–µ–¥–µ—Ç –∑–∞–∫–∞–∑
        if (deltaPayed == 1 && order.payStatus == true) {
          console.log(`Order: –û–ø–ª–∞—á–µ–Ω–Ω—ã–π, –¥–æ –¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${deltaPayed} –¥.`);

          const user = await UserModel.findOne({ tlgid: order.tlgid });

          if (!user) {
            return;
          }

          const language = user.language;

          const text = {
            title: {
              de: 'üöö Ihre Bestellung wird in K√ºrze geliefert.',
              en: 'üöö Your order will be delivered soon',
              ru: 'üöö –ó–∞–∫–∞–∑ —É–∂–µ —Ä—è–¥–æ–º',
            },
            subtitle: {
              de: 'voraussichtlicher Liefertermin: ',
              en: 'estimate date of delivery: ',
              ru: '–ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ',
            },

            open: {
              de: '√∂ffnen',
              en: 'open',
              ru: '–æ—Ç–∫—Ä—ã—Ç—å',
            },
          };

          const btnText = text.open[language];

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
          const message = `${text.title[language]}\n\n${text.subtitle[language]}${etaFormattedToSend}`;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
          const telegramResponse = await axios.post(
            `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
            {
              chat_id: order.tlgid,
              text: message,
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: btnText,
                      web_app: {
                        url: process.env.FRONTEND_URL,
                      },
                    },
                  ],
                ],
              },
            }
          );

          console.log(
            '[Telegram] Message sent successfully:',
            telegramResponse.data
          );
        }
        // —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –ø–æ—Å—ã–ª–∫—É? (—á–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ ETA)
        else if (deltaPayed == -2 && order.payStatus == true && order.isUserConfirmDelivery == null) {
          console.log(
            `Order: –û–ø–ª–∞—á–µ–Ω–Ω—ã–π, –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ—à–ª–æ: ${deltaPayed} –¥.`
          );

          const user = await UserModel.findOne({ tlgid: order.tlgid });

          if (!user) {
            return;
          }

          const language = user.language;

          const text = {
            title: {
              de: 'Haben Sie Ihre Bestellung erhalten‚ùì',
              en: 'Have you received your order‚ùì',
              ru: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–∫–∞–∑‚ùì',
            },
            subtitle: {
              de: 'bitte klicken Sie unten auf die entsprechende Schaltfl√§che',
              en: 'please click the appropriate button below',
              ru: '–Ω–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
            },

            yesBtn: {
              de: '‚úÖ ja',
              en: '‚úÖ yes',
              ru: '‚úÖ –¥–∞',
            },

            noBtn: {
              de: 'üö´ nein',
              en: 'üö´ no',
              ru: 'üö´ –Ω–µ—Ç',
            },
          };

          const yesBtnText = text.yesBtn[language];
          const noBtnText = text.noBtn[language];

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
          const message = `${text.title[language]}\n\n${text.subtitle[language]}`;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
          const telegramResponse = await axios.post(
            `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
            {
              chat_id: order.tlgid,
              text: message,
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: yesBtnText,
                      callback_data: `y_${order._id}`,
                    },
                    {
                      text: noBtnText,
                      callback_data: `n_${order._id}`,
                    },
                  ],
                ],
              },
            }
          );

          console.log(
            '[Telegram] Message sent successfully:',
            telegramResponse.data
          );

          const msgid = telegramResponse.data.result.message_id;
          const jbid = order.jbid;

          const jbtoken = process.env.JB_TOKEN;
          const jburlUpdateVar = process.env.JB_URL_UPDATE_VAR;

          const bodyUpdateVar = {
            api_token: jbtoken,
            contact_id: jbid,
            name: 'msgid',
            value: `${msgid}`,
          };

          const safeRequest = async (url, body, headers) => {
            try {
              return await axios.post(url, body, { headers });
            } catch (error) {
              console.error('Request failed:', error.message);
              return null;
            }
          };

          const response = await safeRequest(jburlUpdateVar, bodyUpdateVar, {
            'Content-Type': 'application/json',
          });

          if (response && response.status === 200) {
            console.log('–¥–∞–Ω–Ω—ã–µ –≤ JB –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          } else {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JB');
          }

          // console.log('–¥–∞–Ω–Ω—ã–µ –≤ JB –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
        }  
        
        // –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –Ω–∞–∂–∞–ª –¥–∞/–Ω–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        else if (deltaPayed == -3 && order.payStatus == true && order.isUserConfirmDelivery == null) {

            await UserModel.findOneAndUpdate(
              { tlgid: order.tlgid },
              { isWaitingAdminAction: true }
            
            );
            
            await OrdersModel.findOneAndUpdate(
              { _id: order._id },
              { orderStatus: '689b8af622baabcbb7047b9e' }
            
            );

            console.log('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –¥–∞-–Ω–µ—Ç, –ø–æ–º–µ–Ω—è–ª isWaitingAdminAction=TRUE ')

        }
        
        
        
        else {
          console.log('no action with payed orders');
        }
      }

      //  –¥–ª—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
      // 4) –í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é delta –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –ë–î
      const createdDate = new Date(order.createdAt);
      const timeDifferenceToNotPayedOrders =
        todayDate.getTime() - createdDate.getTime();
      const deltaNotPayed = Math.floor(
        timeDifferenceToNotPayedOrders / (1000 * 60 * 60 * 24)
      );

      // —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —É–¥–∞–ª–∏–º –∑–∞–∫–∞–∑
      if (deltaNotPayed == 6 && order.payStatus == false) {
        console.log(
          `Order: –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π, Days since creation: ${deltaNotPayed}`
        );

        const user = await UserModel.findOne({ tlgid: order.tlgid });

        if (!user) {
          return;
        }

        const language = user.language;

        const text = {
          title: {
            de: '‚ùå Wir werden Ihre Bestellung morgen l√∂schen.',
            en: '‚ùå Your order will be deleted tomorrow',
            ru: '‚ùå –ó–∞–≤—Ç—Ä–∞ —É–¥–∞–ª–∏–º –≤–∞—à –∑–∞–∫–∞–∑',
          },
          subtitle: {
            de: 'Damit die Waren Ihnen sicher geh√∂ren ‚Äì geben Sie Ihre Bestellung jetzt auf',
            en: 'To make sure you get the goods you want, place your order right now',
            ru: '–ß—Ç–æ–±—ã —Ç–æ–≤–∞—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞ –≤–∞–º–∏ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
          },

          open: {
            de: '√∂ffnen',
            en: 'open',
            ru: '–æ—Ç–∫—Ä—ã—Ç—å',
          },
        };

        const btnText = text.open[language];

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        const message = `${text.title[language]}\n\n${text.subtitle[language]}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
        const telegramResponse = await axios.post(
          `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
          {
            chat_id: order.tlgid,
            text: message,
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: btnText,
                    web_app: {
                      url: process.env.FRONTEND_URL,
                    },
                  },
                ],
              ],
            },
          }
        );

        console.log(
          '[Telegram] Message sent successfully:',
          telegramResponse.data
        );

        // —É–¥–∞–ª—è–µ–º order
      } else if (deltaNotPayed >= 7) {
        const user = await UserModel.findOneAndUpdate(
          { tlgid: order.tlgid },
          { crmStatus: 0 },
          { new: true }
        );

        if (!user) {
          return;
        }

        const jbid = user.jbid;

        // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ JB –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –¥–æ–∂–∏–º–∞ –∏ —Ä–∞—Å—Å—ã–ª–æ–∫
        const jbtoken = process.env.JB_TOKEN;
        const jburlSetTag = process.env.JB_URL_SET_TAG;
        // const jburlDelTag = process.env.JB_URL_DEL_TAG
        const jburlUpdateVar = process.env.JB_URL_UPDATE_VAR;

        const bodySetTag = {
          api_token: jbtoken,
          contact_id: jbid,
          name: 'crmStatus0',
        };

        // const bodyDelTag = {
        //   api_token: jbtoken,
        //   contact_id: jbid,
        //   name: "openBot",
        // }

        // const bodyDelTag2 = {
        //   api_token: jbtoken,
        //   contact_id: jbid,
        //   name: "crmStatus0",
        // }

        const bodyUpdateVar = {
          api_token: jbtoken,
          contact_id: jbid,
          name: 'context',
          value: 'crmStatus0',
        };

        const bodyUpdateVar2 = {
          api_token: jbtoken,
          contact_id: jbid,
          name: 'crmStatus',
          value: '0',
        };

        const safeRequest = async (url, body, headers) => {
          try {
            return await axios.post(url, body, { headers });
          } catch (error) {
            console.error('Request failed:', error.message);
            return null;
          }
        };

        //–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–± JB —É—Å–ø–µ–ª –ø–µ—Ä–µ–≤–∞—Ä–∏—Ç—å 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

        const response1 = await safeRequest(jburlSetTag, bodySetTag, {
          'Content-Type': 'application/json',
        });
        await delay(500);

        // const response2 = await safeRequest(jburlDelTag, bodyDelTag, {
        //   'Content-Type': 'application/json' });
        // await delay(500);

        // const response3 = await safeRequest(jburlDelTag, bodyDelTag2, {
        //   'Content-Type': 'application/json' });
        // await delay(500);

        const response2 = await safeRequest(jburlUpdateVar, bodyUpdateVar, {
          'Content-Type': 'application/json',
        });
        await delay(500);

        const response3 = await safeRequest(jburlUpdateVar, bodyUpdateVar2, {
          'Content-Type': 'application/json',
        });

        console.log('–≤ JB –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è');
        console.log('response 1', response1.status, response1.statusText);
        console.log('response 2', response2.status, response2.statusText);
        console.log('response 3', response3.status, response3.statusText);
        // console.log('response 4', response4.status , response4.statusText)
        // console.log('response 5', response5.status , response5.statusText)

        await OrdersModel.deleteOne({
          _id: order._id,
        });

        console.log(
          `Order ID: ${order._id}, Days since creation: ${deltaNotPayed}`
        );
        console.log('order deleted');
      } else {
        console.log('no orders to delete');
      }
    }
  } catch (err) {
    console.log('error', err);
    return;
  }
}
